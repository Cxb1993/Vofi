# **************************************************** #
#        Makefile for the VOFI library and tests       #
# **************************************************** #

# C, F and CPP compilers and flags
CC       = @CC@
CFLAGS   = @CFLAGS@ 
FC       = @FC@
FCFLAGS  = @FCFLAGS@
CXX      = @CXX@
CXXFLAGS = @CXXFLAGS@

# utilities
RM     = @RM@
AR     = @AR@
RANLIB = @RANLIB@

# libraries
LIBS = @LIBS@

# local paths
srcdir  = ./src
incdir  = ./include
demodir = ./demo_src
demobin = ./demo_bin
libvdir = ./lib
libv    = -lvofi

# paths to install
prefix      = @prefix@
exec_prefix = @exec_prefix@
libdir      = @libdir@
includedir  = @includedir@

# lib
HEADERS         = ./include/vofi.h
LIB             = libvofi.a
INSTALL         = @INSTALL@
INSTALL_DATA    = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

# tests
TESTNAMES := ellipse sine_line gaussian rectangle cap1 cap2 cap3 sphere sine_surf
C_BIN := $(addsuffix -c, $(TESTNAMES)) 
F_BIN := $(addsuffix -f, $(TESTNAMES)) 
CPP_BIN := $(addsuffix -cpp, $(TESTNAMES)) 

# tar archive
TARDIR = @PACKAGE_NAME@-@PACKAGE_VERSION@
TARFILE = $(TARDIR).tar.gz

# ************* #
#    Targets    #
# ************* #

all: lib demo

lib: $(LIB)

demo: demo-c demo-f demo-cpp

demo-c: $(C_BIN)
	$(INSTALL) -m 755 -d $(demobin); \
	mv $(C_BIN) $(demobin)

demo-f: $(F_BIN)
	$(INSTALL) -m 755 -d $(demobin); \
	mv $(F_BIN) $(demobin) 

demo-cpp: $(CPP_BIN)
	$(INSTALL) -m 755 -d $(demobin); \
	mv $(CPP_BIN) $(demobin) 

tests: tests-c tests-f tests-cpp

install: 
	$(INSTALL) -m 755 -d $(DESTDIR)$(libdir) \
			     $(DESTDIR)$(includedir)
	$(INSTALL_DATA) $(libvdir)/$(LIB) $(DESTDIR)$(libdir)
	for f in $(HEADERS) ; do \
	    $(INSTALL_DATA) `test -f $$f || echo ./`$$f $(DESTDIR)$(includedir); \
	done

# ****************** #
#    VOFI library    #
# ****************** #

# header files
COMMON_CDEPS = $(incdir)/stddecl.h $(incdir)/GL.h

# src files
SRCS = $(srcdir)/checkconsistency.c $(srcdir)/getcc.c $(srcdir)/getdirs.c $(srcdir)/getfh.c $(srcdir)/getintersections.c \
       $(srcdir)/getlimits.c $(srcdir)/getmin.c $(srcdir)/getzero.c $(srcdir)/integrate.c $(srcdir)/interface_.c

# library members with the same compilation rule
OBJS = checkconsistency.o getcc.o getdirs.o getfh.o getintersections.o \
	getlimits.o getmin.o getzero.o integrate.o interface_.o

$(OBJS): %.o: $(srcdir)/%.c $(COMMON_CDEPS)
	$(CC) $(CFLAGS) -I$(incdir)  -c $< -o $@  
	$(AR) $(ARFLAGS) $(LIB) $@
	$(RM) $@

# interface functions from Fortran to C, with option -DNOUNDERSCORE

INTERFACE_C = $(srcdir)/interface.c
interface.o: $(INTERFACE_C) $(COMMON_CDEPS) 
	$(CC) $(CFLAGS) -I$(incdir) -DNOUNDERSCORE -c -o interface.o $(INTERFACE_C)
	$(AR) $(ARFLAGS) $(LIB) interface.o
	$(RM) interface.o

$(LIB): $(OBJS) interface.o
	$(RANLIB) $(LIB); \
	$(INSTALL) -m 755 -d $(libvdir); \
	mv $(LIB) $(libvdir)

# ************************** #
#    Compile C tests (2D)    #
# ************************** #

ELLI_DIR_C = $(demodir)/C/2D/Ellipse
ELLI_SRC_C = $(ELLI_DIR_C)/ellipse.c $(ELLI_DIR_C)/main2D.c
ellipse-c: $(ELLI_SRC_C) $(ELLI_DIR_C)/ellipse.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(ELLI_SRC_C) -L$(libvdir) $(libv) $(LIBS)

SIN2_DIR_C = $(demodir)/C/2D/Sine_line
SIN2_SRC_C = $(SIN2_DIR_C)/sine_line.c $(SIN2_DIR_C)/main2D.c
sine_line-c: $(SIN2_SRC_C) $(SIN2_DIR_C)/sine_line.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(SIN2_SRC_C) -L$(libvdir) $(libv) $(LIBS)

GAUSS_DIR_C = $(demodir)/C/2D/Gaussian
GAUSS_SRC_C = $(GAUSS_DIR_C)/gaussian.c $(GAUSS_DIR_C)/main2D.c
gaussian-c: $(GAUSS_SRC_C) $(GAUSS_DIR_C)/gaussian.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(GAUSS_SRC_C) -L$(libvdir) $(libv) $(LIBS)

RECT_DIR_C = $(demodir)/C/2D/Rectangle
RECT_SRC_C = $(RECT_DIR_C)/rectangle.c $(RECT_DIR_C)/main2D.c
rectangle-c: $(RECT_SRC_C) $(RECT_DIR_C)/rectangle.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(RECT_SRC_C) -L$(libvdir) $(libv) $(LIBS)

# ************************** #
#    Compile C tests (3D)    #
# ************************** #

CAP1_DIR_C = $(demodir)/C/3D/Cap1
CAP1_SRC_C = $(CAP1_DIR_C)/cap.c $(CAP1_DIR_C)/main3D.c
cap1-c: $(CAP1_SRC_C) $(CAP1_DIR_C)/cap.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(CAP1_SRC_C) -L$(libvdir) $(libv) $(LIBS)

CAP2_DIR_C = $(demodir)/C/3D/Cap2
CAP2_SRC_C = $(CAP2_DIR_C)/cap.c $(CAP2_DIR_C)/main3D.c
cap2-c: $(CAP2_SRC_C) $(CAP2_DIR_C)/cap.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(CAP2_SRC_C) -L$(libvdir) $(libv) $(LIBS)

CAP3_DIR_C = $(demodir)/C/3D/Cap3
CAP3_SRC_C = $(CAP3_DIR_C)/cap.c $(CAP3_DIR_C)/main3D.c
cap3-c: $(CAP3_SRC_C) $(CAP3_DIR_C)/cap.h $(incdir)/vofi.h 
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(CAP3_SRC_C) -L$(libvdir) $(libv) $(LIBS)

SPHE_DIR_C = $(demodir)/C/3D/Sphere
SPHE_SRC_C = $(SPHE_DIR_C)/sphere.c $(SPHE_DIR_C)/main3D.c
sphere-c: $(SPHE_SRC_C) $(SPHE_DIR_C)/sphere.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(SPHE_SRC_C) -L$(libvdir) $(libv) $(LIBS)

SIN3_DIR_C = $(demodir)/C/3D/Sine_surface
SIN3_SRC_C = $(SIN3_DIR_C)/sine_surf.c $(SIN3_DIR_C)/main3D.c
sine_surf-c: $(SIN3_SRC_C) $(SIN3_DIR_C)/sine_surf.h $(incdir)/vofi.h
	$(CC) $(CFLAGS) -I$(incdir) -I. -o $@ $(SIN3_SRC_C) -L$(libvdir) $(libv) $(LIBS)

# ******************************** #
#    Compile Fortran tests (2D)    #
# ******************************** #

ELLI_DIR_F = $(demodir)/Fortran/2D/Ellipse
ELLI_SRC_F = $(ELLI_DIR_F)/ellipse.f90 $(ELLI_DIR_F)/main2D.f90
ellipse-f: $(ELLI_SRC_F)  
	$(FC) $(FFLAGS) -o $@ $(ELLI_SRC_F) -L$(libvdir) $(libv) $(LIBS)

SIN2_DIR_F = $(demodir)/Fortran/2D/Sine_line
SIN2_SRC_F = $(SIN2_DIR_F)/sine_line.f90 $(SIN2_DIR_F)/main2D.f90
sine_line-f: $(SIN2_SRC_F) 
	$(FC) $(FFLAGS) -o $@ $(SIN2_SRC_F) -L$(libvdir) $(libv) $(LIBS)

GAUSS_DIR_F = $(demodir)/Fortran/2D/Gaussian
GAUSS_SRC_F = $(GAUSS_DIR_F)/gaussian.f90 $(GAUSS_DIR_F)/main2D.f90
gaussian-f: $(GAUSS_SRC_F)
	$(FC) $(FFLAGS) -o $@ $(GAUSS_SRC_F) -L$(libvdir) $(libv) $(LIBS)

RECT_DIR_F = $(demodir)/Fortran/2D/Rectangle
RECT_SRC_F = $(RECT_DIR_F)/rectangle.f90 $(RECT_DIR_F)/main2D.f90
rectangle-f: $(RECT_SRC_F) 
	$(FC) $(FFLAGS) -o $@ $(RECT_SRC_F) -L$(libvdir) $(libv) $(LIBS)

# ******************************** #
#    Compile Fortran tests (3D)    #
# ******************************** #

CAP1_DIR_F = $(demodir)/Fortran/3D/Cap1
CAP1_SRC_F = $(CAP1_DIR_F)/cap.f90 $(CAP1_DIR_F)/main3D.f90
cap1-f: $(CAP1_SRC_F)
	$(FC) $(FFLAGS) -o $@ $(CAP1_SRC_F) -L$(libvdir) $(libv) $(LIBS)

CAP2_DIR_F = $(demodir)/Fortran/3D/Cap2
CAP2_SRC_F = $(CAP2_DIR_F)/cap.f90 $(CAP2_DIR_F)/main3D.f90
cap2-f: $(CAP2_SRC_F) 
	$(FC) $(FFLAGS) -o $@ $(CAP2_SRC_F) -L$(libvdir) $(libv) $(LIBS)

CAP3_DIR_F = $(demodir)/Fortran/3D/Cap3
CAP3_SRC_F = $(CAP3_DIR_F)/cap.f90 $(CAP3_DIR_F)/main3D.f90
cap3-f: $(CAP3_SRC_F) 
	$(FC) $(FFLAGS) -o $@ $(CAP3_SRC_F) -L$(libvdir) $(libv) $(LIBS)

SPHERE_DIR_F = $(demodir)/Fortran/3D/Sphere
SPHERE_SRC_F = $(SPHERE_DIR_F)/sphere.f90 $(SPHERE_DIR_F)/main3D.f90
sphere-f: $(SPHERE_SRC_F)
	$(FC) $(FFLAGS) -o $@ $(SPHERE_SRC_F) -L$(libvdir) $(libv) $(LIBS)

SIN3_DIR_F = $(demodir)/Fortran/3D/Sine_surface
SIN3_SRC_F = $(SIN3_DIR_F)/sine_surf.f90 $(SIN3_DIR_F)/main3D.f90
sine_surf-f: $(SIN3_SRC_F)
	$(FC) $(FFLAGS) -o $@ $(SIN3_SRC_F) -L$(libvdir) $(libv) $(LIBS)

# **************************** #
#    Compile CPP tests (2D)    #
# **************************** #

ELLI_DIR_CPP = $(demodir)/CPP/2D/Ellipse
ELLI_SRC_CPP = $(ELLI_DIR_CPP)/ellipse.cpp $(ELLI_DIR_CPP)/main2D.cpp
ellipse-cpp: $(ELLI_SRC_CPP) $(ELLI_DIR_CPP)/ellipse.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(ELLI_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

SIN2_DIR_CPP = $(demodir)/CPP/2D/Sine_line
SIN2_SRC_CPP = $(SIN2_DIR_CPP)/sine_line.cpp $(SIN2_DIR_CPP)/main2D.cpp
sine_line-cpp: $(SIN2_SRC_CPP) $(SIN2_DIR_CPP)/sine_line.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(SIN2_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

GAUSS_DIR_CPP = $(demodir)/CPP/2D/Gaussian
GAUSS_SRC_CPP = $(GAUSS_DIR_CPP)/gaussian.cpp $(GAUSS_DIR_CPP)/main2D.cpp
gaussian-cpp: $(GAUSS_SRC_CPP) $(GAUSS_DIR_CPP)/gaussian.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(GAUSS_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

RECT_DIR_CPP = $(demodir)/CPP/2D/Rectangle
RECT_SRC_CPP = $(RECT_DIR_CPP)/rectangle.cpp $(RECT_DIR_CPP)/main2D.cpp
rectangle-cpp: $(RECT_SRC_CPP) $(RECT_DIR_CPP)/rectangle.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(RECT_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

# **************************** #
#    Compile CPP tests (3D)    #
# **************************** #

CAP1_DIR_CPP = $(demodir)/CPP/3D/Cap1
CAP1_SRC_CPP = $(CAP1_DIR_CPP)/cap.cpp $(CAP1_DIR_CPP)/main3D.cpp
cap1-cpp: $(CAP1_SRC_CPP) $(CAP1_DIR_CPP)/cap.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(CAP1_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

CAP2_DIR_CPP = $(demodir)/CPP/3D/Cap2
CAP2_SRC_CPP = $(CAP2_DIR_CPP)/cap.cpp $(CAP2_DIR_CPP)/main3D.cpp
cap2-cpp: $(CAP2_SRC_CPP) $(CAP2_DIR_CPP)/cap.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(CAP2_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

CAP3_DIR_CPP = $(demodir)/CPP/3D/Cap3
CAP3_SRC_CPP = $(CAP3_DIR_CPP)/cap.cpp $(CAP3_DIR_CPP)/main3D.cpp
cap3-cpp: $(CAP3_SRC_CPP) $(CAP3_DIR_CPP)/cap.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(CAP3_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

SPHE_DIR_CPP = $(demodir)/CPP/3D/Sphere
SPHE_SRC_CPP = $(SPHE_DIR_CPP)/sphere.cpp $(SPHE_DIR_CPP)/main3D.cpp
sphere-cpp: $(SPHE_SRC_CPP) $(SPHE_DIR_CPP)/sphere.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(SPHE_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

SIN3_DIR_CPP = $(demodir)/CPP/3D/Sine_surface
SIN3_SRC_CPP = $(SIN3_DIR_CPP)/sine_surf.cpp $(SIN3_DIR_CPP)/main3D.cpp
sine_surf-cpp: $(SIN3_SRC_CPP) $(SIN3_DIR_CPP)/sine_surf.h $(incdir)/vofi.h
	$(CXX) $(CXXFLAGS) -I$(incdir) -I. -o $@ $(SIN3_SRC_CPP) -L$(libvdir) $(libv) $(LIBS)

# *************************************** #
#    Run all C, Fortran and  CPP tests    #
# *************************************** #

tests-c:
	@echo " "  
	@echo "               RUNNING C TESTS"  
	@echo " "  
	@echo "Running Ellipse-c (2D example)"  
	$(demobin)/ellipse-c
	@echo "Running Sine_line-c (2D example)"
	$(demobin)/sine_line-c
	@echo "Running Gaussian-c (2D example)"
	$(demobin)/gaussian-c
	@echo "Running Rectangle-c (2D example)"
	$(demobin)/rectangle-c
	@echo "Running Cap1-c (3D example)"
	$(demobin)/cap1-c 
	@echo "Running Cap2-c (3D example)"
	$(demobin)/cap2-c 
	@echo "Running Cap3-c (3D example)"
	$(demobin)/cap3-c 
	@echo "Running Sphere-c (3D example)"
	$(demobin)/sphere-c 
	@echo "Running Sine_surface-c (3D example)"
	$(demobin)/sine_surf-c

tests-f: 
	@echo " "  
	@echo "               RUNNING FORTRAN TESTS"  
	@echo " "  
	@echo "Running Ellipse-f (2D example)"  
	$(demobin)/ellipse-f
	@echo "Running Sine_line-f (2D example)"
	$(demobin)/sine_line-f
	@echo "Running Gaussian-f (2D example)"
	$(demobin)/gaussian-f
	@echo "Running Rectangle-f (2D example)"
	$(demobin)/rectangle-f
	@echo "Running Cap1-f (3D example)"
	$(demobin)/cap1-f 
	@echo "Running Cap2-f (3D example)"
	$(demobin)/cap2-f 
	@echo "Running Cap3-f (3D example)"
	$(demobin)/cap3-f 
	@echo "Running Sphere-f (3D example)"
	$(demobin)/sphere-f 
	@echo "Running Sine_surface-f (3D example)"
	$(demobin)/sine_surf-f

tests-cpp: 
	@echo " "  
	@echo "               RUNNING CPP TESTS"  
	@echo " "  
	@echo "Running Ellipse-cpp (2D example)" 
	$(demobin)/ellipse-cpp
	@echo "Running Sine_line-cpp (2D example)"
	$(demobin)/sine_line-cpp
	@echo "Running Gaussian-cpp (2D example)"
	$(demobin)/gaussian-cpp
	@echo "Running Rectangle-cpp (2D example)"
	$(demobin)/rectangle-cpp
	@echo "Running Cap1-cpp (3D example)"
	$(demobin)/cap1-cpp
	@echo "Running Cap2-cpp (3D example)"
	$(demobin)/cap2-cpp
	@echo "Running Cap3-cpp (3D example)"
	$(demobin)/cap3-cpp
	@echo "Running Sphere-cpp (3D example)"
	$(demobin)/sphere-cpp
	@echo "Running Sine_surface-cpp (3D example)"
	$(demobin)/sine_surf-cpp

# ************** #
#  Tar Archive   #
# ************** #

TARCONTENTS = ./README ./configure ./configure.ac ./install-sh \
              ./makefile.in $(COMMON_CDEPS) $(HEADERS) $(SRCS) \
              $(ELLI_SRC_C) $(ELLI_DIR_C)/ellipse.h $(SIN2_SRC_C) $(SIN2_DIR_C)/sine_line.h \
              $(GAUSS_SRC_C) $(GAUSS_DIR_C)/gaussian.h $(RECT_SRC_C) $(RECT_DIR_C)/rectangle.h \
              $(CAP1_SRC_C) $(CAP1_DIR_C)/cap.h $(CAP2_SRC_C) $(CAP2_DIR_C)/cap.h $(CAP3_SRC_C) \
              $(CAP3_DIR_C)/cap.h $(SPHE_SRC_C) $(SPHE_DIR_C)/sphere.h $(SIN3_SRC_C) $(SIN3_DIR_C)/sine_surf.h \
              $(ELLI_SRC_F) $(SIN2_SRC_F) $(GAUSS_SRC_F) $(RECT_SRC_F) \
              $(CAP1_SRC_F) $(CAP2_SRC_F) $(CAP3_SRC_F) $(SPHE_SRC_F) $(SIN3_SRC_F) \
              $(ELLI_SRC_CPP) $(ELLI_DIR_CPP)/ellipse.h $(SIN2_SRC_CPP) $(SIN2_DIR_CPP)/sine_line.h \
              $(GAUSS_SRC_CPP) $(GAUSS_DIR_CPP)/gaussian.h $(RECT_SRC_CPP) $(RECT_DIR_CPP)/rectangle.h \
              $(CAP1_SRC_CPP) $(CAP1_DIR_CPP)/cap.h $(CAP2_SRC_CPP) $(CAP2_DIR_CPP)/cap.h $(CAP3_SRC_CPP) \
              $(CAP3_DIR_CPP)/cap.h $(SPHE_SRC_CPP) $(SPHE_DIR_CPP)/sphere.h $(SIN3_SRC_CPP) $(SIN3_DIR_CPP)/sine_surf.h \
  
dist:
	ln -s . $(TARDIR)
	tar cvfzh $(TARFILE) --owner=root --group=root \
	  $(patsubst ./%,$(TARDIR)/%, $(sort $(TARCONTENTS)))
	$(RM) $(TARDIR)

	
# ************** #
#    Cleaning    #
# ************** #

distclean:
	@echo "Cleaning binaries directory"
	$(RM) -fr $(demobin)
	@echo " "  
	@echo "Cleaning library directory"
	$(RM) -fr $(libvdir)
	@echo " "  
	@echo "Removing local files"
	$(RM) -f makefile
	$(RM) -f config.log
	$(RM) -f config.status
	$(RM) -f $(TARFILE)
